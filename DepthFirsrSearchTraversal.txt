In computer science, tree traversal (also known as tree search) is a form of graph traversal
and refers to the process of visiting (checking and/or updating) each node in a tree data structure, exactly once. 
Such traversals are classified by the order in which the nodes are visited. The following algorithms are described for a binary tree, 
but they may be generalized to other trees as well Trees can be traversed in pre-order, in-order, or post-order.
These searches are referred to as depth-first search (DFS), as the search tree is deepened as much as possible on each child before going to the next sibling. For a binary tree, they are defined as display operations recursively at each node, starting with the root, whose algorithm is as follows. 
 *****************************************************************************************************************************
 *The general recursive pattern for traversing a (non-empty) binary tree is this: At node N you must do these three things:  *
 *****************************************************************************************************************************
(L) recursively traverse its left subtree. When this step is finished you are back at N again.

(R) recursively traverse its right subtree. When this step is finished you are back at N again.

(N) Actually process N itself.

We may do these things in any order and still have a legitimate traversal. If we do (L) before (R), we call it left-to-right traversal, otherwise we call it right-to-left traversal.

Pre-order
----------
Display the data part of the root (or current node).
Traverse the left subtree by recursively calling the pre-order function.
Traverse the right subtree by recursively calling the pre-order function.
In-order	Edit
Traverse the left subtree by recursively calling the in-order function.
Display the data part of the root (or current node).
Traverse the right subtree by recursively calling the in-order function.
In a search tree, in-order traversal retrieves data in sorted order.

Post-order
----------
Traverse the left subtree by recursively calling the post-order function.
Traverse the right subtree by recursively calling the post-order function.
Display the data part of the root (or current node).
The trace of a traversal is called a sequentialisation of the tree. The traversal trace is a list of each visited root. 
No one sequentialisation according to pre-, in- or post-order describes the underlying tree uniquely. Given a tree with distinct elements, 
either pre-order or post-order paired with in-order is sufficient to describe the tree uniquely.
However, pre-order with post-order leaves some ambiguity in the tree structure.

Generic tree
------------
To traverse any tree with depth-first search, perform the following operations recursively at each node:
Perform pre-order operation.
For each i from 1 to the number of children do:
Visit i-th, if present.
Perform in-order operation.
Perform post-order operation.
Depending on the problem at hand, the pre-order, in-order or post-order operations may be void,
or you may only want to visit a specific child, so these operations are optional. Also, in practice more than one of pre-order, 
in-order and post-order operations may be required. For example, when inserting into a ternary tree, 
pre-order operation is performed by comparing items. A post-order operation may be needed afterwards to re-balance the tree.
Pre-order	
preorder(node)
--------------
  if (node = null)
    return
  visit(node)
  preorder(node.left)
  preorder(node.right)

iterativePreorder(node)
-----------------------
  if (node = null)
    return
  s ← empty stack
  s.push(node)
  while (not s.isEmpty())
    node ← s.pop()
    visit(node)
    if (node.right ≠ null)
      s.push(node.right)
    if (node.left ≠ null)
      s.push(node.left)
In-order	
inorder(node)
-------------
  if (node = null)
    return
  inorder(node.left)
  visit(node)
  inorder(node.right)
iterativeInorder(node)
----------------------
  s ← empty stack
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      node ← s.pop()
      visit(node)
      node ← node.right
Post-order	Edit
postorder(node)
---------------
  if (node = null)
    return
  postorder(node.left)
  postorder(node.right)
  visit(node)
iterativePostorder(node)
------------------------
  s ← empty stack
  lastNodeVisited ← null
  while (not s.isEmpty() or node ≠ null)
    if (node ≠ null)
      s.push(node)
      node ← node.left
    else
      peekNode ← s.peek()
      // if right child exists and traversing node
      // from left child, then move right
      if (peekNode.right ≠ null and lastNodeVisited ≠ peekNode.right)
        node ← peekNode.right
      else
        visit(peekNode)
        lastNodeVisited ← s.pop()
